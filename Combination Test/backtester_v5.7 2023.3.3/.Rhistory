# compare with
table.Drawdowns(returns)
maxDrawdown(returns)
# Pathalogical example - showing two
# completely different equity curves
# with the same Sharpe Ratio
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
n <- 15
ud1 <- xts(rep(c(0.1,-0.05),n),as.Date(1:(2*n)))
ud2 <- xts(c(rep(0.1,n),rep(-0.05,n)),as.Date(1:(2*n)))
plot(cumprod(1+ud1))
last(cumprod(1+ud1)) # equity curves end at same level
last(cumprod(1+ud2))
m <- merge(ud1,ud2)
m <- cumprod(m+1)
m1 <- m[,"ud1"]
m2 <- m[,"ud2"]
pdf("sharpe_example.pdf")
plot(m1, ylim = range(c(m1,m2)),main="Two equity curves with the same Sharpe Ratios")
lines(m2, ylim = range(c(m1,m2)))
dev.off()
SharpeRatio(ud1, FUN="StdDev")
SharpeRatio(ud2, FUN="StdDev")
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
# use existing function
SharpeRatio(returns,Rf,FUN='StdDev')
#complare with explicit calculation
mean(returns - Rf)/sd(returns-Rf)
Rb <- rep(Rf,12)
Rb <- xts(Rb,dates)
SharpeRatio.annualized(returns,Rf)
InformationRatio(returns,Rb)
SharpeRatio.annualized(returns,Rf,geometric=FALSE)
# geometric=FALSE uses arithmetic mean rather than geometric mean
# compare with explicit calculation
mean(12*(returns - Rf))/(sqrt(12)*sd(returns-Rf))
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
# use existing function
SharpeRatio(returns,Rf,FUN='StdDev')
#complare with explicit calculation
mean(returns - Rf)/sd(returns-Rf)
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
# use existing function
SharpeRatio(returns,Rf,FUN='StdDev')
#complare with explicit calculation
mean(returns - Rf)/sd(returns-Rf)
Rb <- rep(Rf,12)
Rb <- xts(Rb,dates)
SharpeRatio.annualized(returns,Rf)
InformationRatio(returns,Rb)
SharpeRatio.annualized(returns,Rf,geometric=FALSE)
# geometric=FALSE uses arithmetic mean rather than geometric mean
# compare with explicit calculation
mean(12*(returns - Rf))/(sqrt(12)*sd(returns-Rf))
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
# use existing function
SharpeRatio(returns,Rf,FUN='StdDev')
#complare with explicit calculation
mean(returns - Rf)/sd(returns-Rf)
Rb <- rep(Rf,12)
Rb <- xts(Rb,dates)
SharpeRatio.annualized(returns,Rf)
InformationRatio(returns,Rb)
SharpeRatio.annualized(returns,Rf,geometric=FALSE)
# geometric=FALSE uses arithmetic mean rather than geometric mean
# compare with explicit calculation
mean(12*(returns - Rf))/(sqrt(12)*sd(returns-Rf))
library(TTR)
library(quantmod)
library(PerformanceAnalytics)
dates <- as.yearmon(2000 + seq(0, 11)/12)
dates <- as.Date(dates)
# simple returns
returns <- c(0.01,-0.02,0.05,0.01,-0.01,0.07,0.06,0,0,-0.1,0.1,0.2)
returns <- xts(returns,dates)
# risk-free rate
Rf <- 0.02
plot(returns,type='h')
plot(cumprod(1+(returns-Rf)))
# use existing function
SharpeRatio(returns,Rf,FUN='StdDev')
#complare with explicit calculation
mean(returns - Rf)/sd(returns-Rf)
Rb <- rep(Rf,12)
Rb <- xts(Rb,dates)
SharpeRatio.annualized(returns,Rf)
InformationRatio(returns,Rb)
SharpeRatio.annualized(returns,Rf,geometric=FALSE)
# geometric=FALSE uses arithmetic mean rather than geometric mean
# compare with explicit calculation
mean(12*(returns - Rf))/(sqrt(12)*sd(returns-Rf))
plot(1:5,1:5)
is.integer(5.0)
is.integer(5)
is.double(5)
is.double(5.0)
is.numeric(5)
is.numeric(5.0)
options(digits = 0)
a = 5.0
a
options(digits = 0)
a = 5.0
a
is.integer(a)
options(digits = 0)
a = 5.0
a
as.integer(a)
options(digits = 0)
a = 5.0
b = as.integer(a)
b
options(digits = 0)
a = 5.0
b = as.integer(a)
is.integer(b)
a = 5.0
b = as.integer(a)
is.integer(b)
a = 5
b = as.integer(a)
is.integer(b)
a = 5.16
b = as.integer(a)
is.integer(b)
a = 5.16
b = as.integer(a)
b
is.integer(b)
options(digits = 0)
a = 5.16
a
options(digits = 0)
a = 5.0
a
options(digits = 0)
a = 5.0
a
b = as.integer(a)
b
is.integer(b)
options(digits = 0)
a = 5.0
a
is.integer(a)
b = as.integer(a)
b
is.integer(b)
setwd("~/backtester_v5.7 2/strategies")
setwd("~/backtester_v5.7")
setwd("/Users/zyx/backtester_v5.7 2")
setwd("~/backtester_v5.7 2")
source("~/backtester_v5.7 2/main.R")
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
#dataList <- lapply(dataList, function(x) x[601:1100])
#choose strategy from example_strategies
strategy <- "combination"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 550
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
# out-of-sample period
#dataList <- lapply(dataList, function(x)
#x[(inSampDays+1):numDays])
# dataList_ins<- lapply(dataList, function(x) x[1:500])
# datalist_out <- lapply(dataList, function(x) x[501:1000])
sMult <- 0.20 # slippage multiplier
results <- backtest(dataList,getOrders,params,sMult)
#print(results)
plotResults(dataList,results)
#pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
#cat("Profit:", results$aggProfit, '\n')
# print(params)
openDiffs <- lapply(dataList,function(x) diff(x$Close))
toPlot <- do.call(cbind,openDiffs)
colnames(toPlot) <- paste("Series",sprintf("%02d",1:10))
# plot.zoo(toPlot,
#          main="Open on open simple differences",
#          cex.axis=1.2,
#          cex.main=2,
#          yax.flip=TRUE)
# dev.copy(pdf,file.path(path,"opendiffs.pdf"))
# dev.off()
#
#
# absOpenDiffs    <- lapply(openDiffs,abs)
# avgAbsDiffs <- sapply(absOpenDiffs,mean,na.rm=TRUE)
# opensOnFirstDay <- sapply(dataList,function(x) first(x)$Open)
#
# tab <- cbind(opensOnFirstDay,
#              avgAbsDiffs,
#              abs(avgAbsDiffs)/opensOnFirstDay)
# colnames(tab) <- c("Open","Mean abs diff","Mean abs diff/Open")
#
# print(tab)
opens <- sapply(dataList,function(x) first(x)$Open)
largestOpen <- max(opens)
positionSizes <- round(largestOpen/opens)
print(list(sizes = positionSizes))
print(positionSizes)
print(opens)
is.list(opens)
# open_prices_xts <- xts(c(23.25, 23.30, 22.90), order.by = as.Date(c("2022-01-01", "2022-01-02", "2022-01-03")))
# colnames(open_prices_xts) <- "Open"
# print(open_prices_xts)
# # extract open prices and select max open price
# max_open_price <- max(coredata(open_prices_xts)[,1])
#
# # print max open price
# print(max_open_price)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
#dataList <- lapply(dataList, function(x) x[601:1100])
#choose strategy from example_strategies
strategy <- "combination"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 550
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
# out-of-sample period
#dataList <- lapply(dataList, function(x)
#x[(inSampDays+1):numDays])
# dataList_ins<- lapply(dataList, function(x) x[1:500])
# datalist_out <- lapply(dataList, function(x) x[501:1000])
sMult <- 0.20 # slippage multiplier
results <- backtest(dataList,getOrders,params,sMult)
#print(results)
plotResults(dataList,results)
#pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
#cat("Profit:", results$aggProfit, '\n')
# print(params)
openDiffs <- lapply(dataList,function(x) diff(x$Close))
toPlot <- do.call(cbind,openDiffs)
colnames(toPlot) <- paste("Series",sprintf("%02d",1:10))
# plot.zoo(toPlot,
#          main="Open on open simple differences",
#          cex.axis=1.2,
#          cex.main=2,
#          yax.flip=TRUE)
# dev.copy(pdf,file.path(path,"opendiffs.pdf"))
# dev.off()
#
#
# absOpenDiffs    <- lapply(openDiffs,abs)
# avgAbsDiffs <- sapply(absOpenDiffs,mean,na.rm=TRUE)
# opensOnFirstDay <- sapply(dataList,function(x) first(x)$Open)
#
# tab <- cbind(opensOnFirstDay,
#              avgAbsDiffs,
#              abs(avgAbsDiffs)/opensOnFirstDay)
# colnames(tab) <- c("Open","Mean abs diff","Mean abs diff/Open")
#
# print(tab)
opens <- sapply(dataList,function(x) first(x)$Open)
largestOpen <- max(opens)
positionSizes <- round(largestOpen/opens)
print(list(sizes = positionSizes))
print(positionSizes)
print(opens)
is.list(opens)
# open_prices_xts <- xts(c(23.25, 23.30, 22.90), order.by = as.Date(c("2022-01-01", "2022-01-02", "2022-01-03")))
# colnames(open_prices_xts) <- "Open"
# print(open_prices_xts)
# # extract open prices and select max open price
# max_open_price <- max(coredata(open_prices_xts)[,1])
#
# # print max open price
# print(max_open_price)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
#dataList <- lapply(dataList, function(x) x[601:1100])
#choose strategy from example_strategies
strategy <- "combination"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 550
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
# out-of-sample period
#dataList <- lapply(dataList, function(x)
#x[(inSampDays+1):numDays])
# dataList_ins<- lapply(dataList, function(x) x[1:500])
# datalist_out <- lapply(dataList, function(x) x[501:1000])
sMult <- 0.20 # slippage multiplier
results <- backtest(dataList,getOrders,params,sMult)
#print(results)
plotResults(dataList,results)
#pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
#cat("Profit:", results$aggProfit, '\n')
# print(params)
openDiffs <- lapply(dataList,function(x) diff(x$Close))
toPlot <- do.call(cbind,openDiffs)
colnames(toPlot) <- paste("Series",sprintf("%02d",1:10))
# plot.zoo(toPlot,
#          main="Open on open simple differences",
#          cex.axis=1.2,
#          cex.main=2,
#          yax.flip=TRUE)
# dev.copy(pdf,file.path(path,"opendiffs.pdf"))
# dev.off()
#
#
# absOpenDiffs    <- lapply(openDiffs,abs)
# avgAbsDiffs <- sapply(absOpenDiffs,mean,na.rm=TRUE)
# opensOnFirstDay <- sapply(dataList,function(x) first(x)$Open)
#
# tab <- cbind(opensOnFirstDay,
#              avgAbsDiffs,
#              abs(avgAbsDiffs)/opensOnFirstDay)
# colnames(tab) <- c("Open","Mean abs diff","Mean abs diff/Open")
#
# print(tab)
opens <- sapply(dataList,function(x) first(x)$Open)
largestOpen <- max(opens)
positionSizes <- round(largestOpen/opens)
print(list(sizes = positionSizes))
print(positionSizes)
print(opens)
is.list(opens)
# open_prices_xts <- xts(c(23.25, 23.30, 22.90), order.by = as.Date(c("2022-01-01", "2022-01-02", "2022-01-03")))
# colnames(open_prices_xts) <- "Open"
# print(open_prices_xts)
# # extract open prices and select max open price
# max_open_price <- max(coredata(open_prices_xts)[,1])
#
# # print max open price
# print(max_open_price)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
#dataList <- lapply(dataList, function(x) x[601:1100])
#choose strategy from example_strategies
strategy <- "combination"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 550
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
# out-of-sample period
#dataList <- lapply(dataList, function(x)
#x[(inSampDays+1):numDays])
# dataList_ins<- lapply(dataList, function(x) x[1:500])
# datalist_out <- lapply(dataList, function(x) x[501:1000])
sMult <- 0.20 # slippage multiplier
results <- backtest(dataList,getOrders,params,sMult)
#print(results)
plotResults(dataList,results)
#pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
#cat("Profit:", results$aggProfit, '\n')
# print(params)
openDiffs <- lapply(dataList,function(x) diff(x$Close))
toPlot <- do.call(cbind,openDiffs)
colnames(toPlot) <- paste("Series",sprintf("%02d",1:10))
# plot.zoo(toPlot,
#          main="Open on open simple differences",
#          cex.axis=1.2,
#          cex.main=2,
#          yax.flip=TRUE)
# dev.copy(pdf,file.path(path,"opendiffs.pdf"))
# dev.off()
#
#
# absOpenDiffs    <- lapply(openDiffs,abs)
# avgAbsDiffs <- sapply(absOpenDiffs,mean,na.rm=TRUE)
# opensOnFirstDay <- sapply(dataList,function(x) first(x)$Open)
#
# tab <- cbind(opensOnFirstDay,
#              avgAbsDiffs,
#              abs(avgAbsDiffs)/opensOnFirstDay)
# colnames(tab) <- c("Open","Mean abs diff","Mean abs diff/Open")
#
# print(tab)
opens <- sapply(dataList,function(x) first(x)$Open)
largestOpen <- max(opens)
positionSizes <- round(largestOpen/opens)
print(list(sizes = positionSizes))
print(positionSizes)
print(opens)
is.list(opens)
# open_prices_xts <- xts(c(23.25, 23.30, 22.90), order.by = as.Date(c("2022-01-01", "2022-01-02", "2022-01-03")))
# colnames(open_prices_xts) <- "Open"
# print(open_prices_xts)
# # extract open prices and select max open price
# max_open_price <- max(coredata(open_prices_xts)[,1])
#
# # print max open price
# print(max_open_price)
