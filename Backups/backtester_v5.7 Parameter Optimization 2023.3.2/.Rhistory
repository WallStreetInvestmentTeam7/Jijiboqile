#    results <- backtest(dataList,temOrders,params,sMult) #Error-infinite recursive
#    #####################################(Calculate Result)########################################
#
#    numOfDays <- nrow(dataList[[1]])
#    numOfSeries <- length(dataList)
#
#    # initialise as 0-vector of length length(dataList)
#    newPosList <- vector(mode="numeric", length = length(dataList))
#
#    # Initialisation of getOrders with first row of data, via is.null(store)
#    store <- NULL #(Note: Variable "store" occur potentially bug!)
#
#    # pnlList will store trading results
#    # initialize lists of 0 rows; getRowList(dataList,1) used to get date for each via index()
#    # pnlList <- mapply(function(x, y) xts(x, index(y)),0, getRowList(dataList,1), SIMPLIFY = FALSE)
#    pnlList <- lapply(1:numOfSeries,function(x) matrix(0,nrow=numOfDays,ncol=1))
#    positionValuesList <- lapply(1:numOfSeries,function(x) matrix(0,nrow=numOfDays,ncol=1))
#    netWorthList <- rep(0, numOfDays)
#
#    # vector that stores a 1 for every day a position was taken in some
#    # series and a 0 otherwise
#    # initialized as all zero vecotr
#    posCounter <-  0
#
#    nonxtsDataList <- lapply(dataList, function(x) as.matrix(x))
#
#    balance <- 1000000
#    newNetWorth <- balance
#    netWorthList[[1]] <- balance
#
#    bankrupt <- FALSE # Are we bankrupt?
#
#    # MAIN LOOP
#    for (i in 2: (numOfDays-1)) { # cannot hold on day 1; day 1 data is given to strategy on day 2
#
#      oldPosList    <- newPosList
#
#      info = list(balance=balance, netWorth=newNetWorth)
#
#      #Modified - Not using "getOrders" function which might occur infinite recursion
#      #Instead, using temporary list
#      x <- ?????
#      x <- getOrders(store, getRowList(dataList,i-1), oldPosList, info, params) #Error-infinite recursive
#    }
#
#    ############################################################################################
#    pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
#
#    #Get the PD-ratio
#    NewPD <- pfolioPnL$fitAgg
#
#    #Compare Pd-ratio and Update the best threshold
#    if (NewPD>=PD){
#      PD <- NewPD
#      BestThreshold <- a/100
#    }
#
#    #Print Iteration
#    Iteration++
#    print("Iteration" +Iteration)
#  }
#  #Initializing Again
#  allzero  <- rep(0,length(newRowList)) # used for initializing vectors
#
#  if (is.null(store)) store <- initStore(newRowList,params$series)
#  store <- updateStore(store, newRowList, params$series)
#
#  marketOrders <- -currentPos; pos <- allzero
#
#  #Apply the Best Threshold
#  for (i in params$series){
#
#    VOLUME = store$vol[,i]
#    CLOSE = store$cl[,i]
#
#    #Alpha006
#    alpha = -1*cor(CLOSE, VOLUME, method="pearson")
#
#    #Change Position
#    if (alpha*100 < BestThreshold){
#      pos[params$series[i]] <- -1
#    }
#    else if (alpha*100 > BestThreshold){
#      pos[params$series[i]] <- 1
#    }
#    else if (alpha*100 == BestThreshold){
#      pos[params$series[i]] <- 0
#    }
#
#    #Update market orders
#    marketOrders <- -currentPos + pos
#  }
return(list(store=store,marketOrders=marketOrders,
limitOrders1=allzero,limitPrices1=allzero,
limitOrders2=allzero,limitPrices2=allzero))
}
initClStore  <- function(newRowList,series) {
clStore <- matrix(0,nrow=maxRows,ncol=length(series))
return(clStore)
}
updateClStore <- function(clStore, newRowList, series, iter) {
for (i in 1:length(series))
clStore[iter,i] <- as.numeric(newRowList[[series[i]]]$Close)
return(clStore)
}
initVolStore  <- function(newRowList,series) {
volStore <- matrix(0,nrow=maxRows,ncol=length(series))
return(volStore)
}
updateVolStore <- function(volStore, newRowList, series, iter) {
for (i in 1:length(series))
volStore[iter,i] <- as.numeric(newRowList[[series[i]]]$Volume)
return(volStore)
}
initOpeStore  <- function(newRowList,series) {
opeStore <- matrix(0,nrow=maxRows,ncol=length(series))
return(opeStore)
}
updateOpeStore <- function(opeStore, newRowList, series, iter) {
for (i in 1:length(series))
opeStore[iter,i] <- as.numeric(newRowList[[series[i]]]$Open)
return(opeStore)
}
initStore <- function(newRowList,series) {
return(list(iter=0,cl=initClStore(newRowList,series),vol=initVolStore(newRowList,series),ope=initOpeStore(newRowList,series)))
}
updateStore <- function(store, newRowList, series) {
store$iter <- store$iter + 1
store$cl <- updateClStore(store$cl,newRowList,series,store$iter)
store$vol <- updateVolStore(store$vol,newRowList,series,store$iter)
store$ope <- updateOpeStore(store$ope,newRowList,series,store$iter)
return(store)
}
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = -50:50
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = -50:50
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = -10:10
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = 10:20
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
print(paste('threshold', i))
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = 10:20
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
print(paste('threshold', i))
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
0
)
()
()
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = 10:20
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
print(paste('threshold', i))
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = 10:20
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
print(paste('threshold', i, 'value', pfolioPnL$fitAgg))
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source('framework/data.R');
source('framework/backtester.R')
source('framework/processResults.R');
source('framework/utilities.R'); # for backtestAndPlot function
source('example_strategies.R');
# load data
dataList <- getData(directory="PART1")
dataList <- lapply(dataList, function(x) x[0:500])
# choose strategy from example_strategies
strategy <- "alpha101"
# check that the choice is valid
is_valid_example_strategy <- function(strategy) {
strategy %in% example_strategies
}
stopifnot(is_valid_example_strategy(strategy))
# load in strategy and params
load_strategy(strategy) # function from example_strategies.R
#Initialize the threshold
thr006Vector = 20:30
thr018 = -100
thr034 = 200
x <- c()
y <- c()
# split data in two (e.g. for in/out test)
# numDays <- nrow(dataList[[1]])
# inSampDays <- 500
#
# # in-sample period
# dataList <- lapply(dataList, function(x) x[1:inSampDays])
#
# # out-of-sample period
# dataList <- lapply(dataList, function(x)
#                                x[(inSampDays+1):numDays])
sMult <- 0.20 # slippage multiplier
#Loop through the threshold
for (i in thr006Vector){
thr006 = i
results <- backtest(dataList,getOrders,params,sMult)
pfolioPnL <- plotResults(dataList,results,plotType='ggplot2')
x <- append(x, thr006)
y <- append(y, pfolioPnL$fitAgg)
print(paste('threshold', i, 'value', pfolioPnL$fitAgg))
}
#Store the threshold and its performance into a dataframe
#Output the data
Mydata <- data.frame(x,y)
write.csv(Mydata, file = "Mydata.csv", row.names = FALSE)
source("~/工作学习/大学学习资料/大四第二学期/COMP396 - Automated Trading Project (FYP)/396Workspace/backtester_v5.7 Parameter Optimization/main.R")
source("~/工作学习/大学学习资料/大四第二学期/COMP396 - Automated Trading Project (FYP)/396Workspace/backtester_v5.7 Parameter Optimization/main.R")
